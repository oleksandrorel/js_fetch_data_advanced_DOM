{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","request","url","fetch","then","response","ok","Promise","reject","Error","status","statusText","json","showMessages","divClassName","header","arr","div","document","createElement","h3","ul","className","textContent","append","forEach","el","insertAdjacentHTML","name","id","toUpperCase","body","getFirstReceivedDetails","getPhones","race","map","phone","getDetailsOfPhone","getAllSuccessfulDetails","all","phoneId","result","catch","error","console","log"],"mappings":";AAAA,aAEA,IAAMA,EAAN,4DAEMC,EAAU,SAACC,GACRC,OAAAA,MAASH,GAAAA,OAAAA,GAAWE,OAAAA,IACxBE,KAAK,SAAAC,GAOGA,OANFA,EAASC,IACZC,QAAQC,OAAO,IAAIC,MACfJ,eAAAA,OAAAA,EAASK,OAAYL,OAAAA,OAAAA,EAASM,WADlC,kBAKKN,EAASO,UAItB,SAASC,EAAaC,EAAcC,EAAQC,GACpCC,IAAAA,EAAMC,SAASC,cAArB,OACMC,EAAKF,SAASC,cAApB,MACME,EAAKH,SAASC,cAApB,MAEAF,EAAIK,UAAYR,EAChBM,EAAGG,YAAcR,EACjBE,EAAIO,OAAOJ,GACXH,EAAIO,OAAOH,GAEXL,EAAIS,QAAQ,SAAAC,GACVL,EAAGM,mBAAmB,YAChBD,aAAAA,OAAAA,EAAGE,KACHF,mBAAAA,OAAAA,EAAGG,GAAGC,cAFZ,kBAKFZ,SAASa,KAAKP,OAAOP,GAGvB,IAAMe,EAA0B,WACvBC,OAAAA,IACJ7B,KAAK,SAAAY,GAAOT,OAAAA,QAAQ2B,KACnBlB,EAAImB,IAAI,SAAAC,GAASC,OAAAA,EAAkBD,EAAMP,UAKzCS,EAA0B,WACvBL,OAAAA,IACJ7B,KAAK,SAAAY,GAAOT,OAAAA,QAAQgC,IACnBvB,EAAImB,IAAI,SAAAC,GAASC,OAAAA,EAAkBD,EAAMP,UAKzCI,EAAY,WAAMhC,OAAAA,EAAN,iBACZoC,EAAoB,SAACG,GAAYvC,OAAAA,EAAmBuC,WAAAA,OAAAA,EAAhC,WAE1BR,IACG5B,KAAK,SAAAqC,GACJ5B,EAAiD,iBAAA,iBAAA,CAAC4B,MAEnDC,MAAM,SAAAC,GAASC,OAAAA,QAAQC,IAAcF,SAAAA,KAExCL,IACGlC,KAAK,SAAAqC,GACJ5B,EAAiD4B,iBAAAA,iBAAAA,KAElDC,MAAM,SAAAC,GAASC,OAAAA,QAAQC,IAAcF,SAAAA","file":"main.93c766e2.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst BASE_URL = `https://mate-academy.github.io/phone-catalogue-static/api`;\n\nconst request = (url) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        Promise.reject(new Error(`\n          ${response.status} - ${response.statusText}\n          `));\n      }\n\n      return response.json();\n    });\n};\n\nfunction showMessages(divClassName, header, arr) {\n  const div = document.createElement(`div`);\n  const h3 = document.createElement(`h3`);\n  const ul = document.createElement(`ul`);\n\n  div.className = divClassName;\n  h3.textContent = header;\n  div.append(h3);\n  div.append(ul);\n\n  arr.forEach(el => {\n    ul.insertAdjacentHTML('beforeend', `\n    <li>${el.name}</li>\n    <li>${el.id.toUpperCase()}</li>\n    `);\n  });\n  document.body.append(div);\n}\n\nconst getFirstReceivedDetails = () => {\n  return getPhones()\n    .then(arr => Promise.race(\n      arr.map(phone => getDetailsOfPhone(phone.id)\n      )\n    ));\n};\n\nconst getAllSuccessfulDetails = () => {\n  return getPhones()\n    .then(arr => Promise.all(\n      arr.map(phone => getDetailsOfPhone(phone.id)\n      )\n    ));\n};\n\nconst getPhones = () => request(`/phones.json`);\nconst getDetailsOfPhone = (phoneId) => request(`/phones/${phoneId}.json`);\n\ngetFirstReceivedDetails()\n  .then(result => {\n    showMessages(`first-received`, `First Received`, [result]);\n  })\n  .catch(error => console.log(`Error:`, error));\n\ngetAllSuccessfulDetails()\n  .then(result => {\n    showMessages(`all-successful`, `All Successful`, result);\n  })\n  .catch(error => console.log(`Error:`, error));\n"]}